<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<atom:link rel="self" href="http://ftr.fivefilters.org/makefulltextfeed.php?url=tpq.me%2Ffeed.rss&amp;links=preserve" />
<atom:link rel="alternate" title="Source URL" href="http://tpq.me/feed.rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2Fftr.fivefilters.org%2Fmakefulltextfeed.php%3Furl%3Dtpq.me%252Ffeed.rss%26links%3Dpreserve&amp;back=http%3A%2F%2Fftr.fivefilters.org%2Fmakefulltextfeed.php%3Furl%3Dtpq.me%252Ffeed.rss%26links%3Dpreserve" />
<title>tpq.me</title>
<link>http://www.tpq.me</link>
<description>Personal website of Thom Quinn</description>
<item>
<title>R Parallelization through Batch Processing</title>
<link>http://www.tpq.me/r-parallelization-through-batch-processing.html</link>
<guid isPermaLink="true" >http://www.tpq.me/r-parallelization-through-batch-processing.html</guid>
<description>&lt;!-- tabsets --&gt;&lt;!-- code folding --&gt;&lt;!--/.navbar --&gt;&lt;div id=&quot;r-an-unparalleled-success&quot; class=&quot;section level3&quot; readability=&quot;36.893320518981&quot;&gt;&lt;h3&gt;R: an unparalleled success&lt;/h3&gt;&lt;p&gt;R as a data science tool has surpassed its alphabetical and reptilian competitors across many domains. However, its performance suffers tremendously from a lack of native parallel support. Although some packages (e.g., &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;doParallel&lt;/code&gt;) have gone a long way in providing parallel computing for R, these plug-and-play parallelization packages have some key disadvantages. First, these packages often use special syntax that may require heavy revision of already drafted code. Second, without extreme attention to detail, these packages tend to invoke scope errors in the setting of layered dependencies. Third, these packages use frameworks that do not necessarily scale to large multi-core clusters.&lt;/p&gt;&lt;p&gt;In this article, we introduce another way to parallelize: through &lt;em&gt;batch processing&lt;/em&gt;. With batch processing, instead of executing a large task as one multi-threaded process, we break up the task into multiple single-threaded processes called &lt;em&gt;jobs&lt;/em&gt;. We then pass each job to a batch processing &lt;em&gt;job manager&lt;/em&gt; to hold in a queue until resources become available. This allows each single-threaded process to eventually get its own node for analysis. Although job managers are most often used in high-performance computing as a convenient way to share a single resource among multiple users, it is possible to set up a job manager like &lt;em&gt;TORQUE&lt;/em&gt; on a personal computer. Since this lacks an easy installation, I put together this run-at-your-own-risk &lt;a href=&quot;http://www.tpq.me/scripts/torque.bash&quot;&gt;script&lt;/a&gt; to install &lt;em&gt;TORQUE&lt;/em&gt; on Ubuntu 16.04.&lt;/p&gt;&lt;p&gt;Although a complete review of batch processing is beyond the scope of this article (and frankly beyond the scope of my expertise), this tutorial will hopefully show you how easy it is to harness &lt;em&gt;TORQUE&lt;/em&gt; to parallelize R scripts. However, keep in mind that the method discussed here relies on the R &lt;code&gt;system&lt;/code&gt; function to execute bash commands in the OS console. As such, this pipeline may not work outside of the Linux environment. Also, if you ever encounter a connection error, take note that you may need to reconfigure the &lt;code&gt;/etc/hosts&lt;/code&gt; file with an updated public IP address.&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;from-cluster-to-cluster&quot; class=&quot;section level3&quot; readability=&quot;47.5&quot;&gt;&lt;h3&gt;From cluster to cluster&lt;/h3&gt;&lt;p&gt;Parallelization of R through batch processing involves two steps. First, we obviate the burden of having to write a parallel-process script by writing a script that writes single-process scripts. Second, we deliver each new script to the batch processing queue where it will wait to get executed on an unoccupied node.&lt;/p&gt;&lt;p&gt;In this endeavor, we make use of two helper functions, &lt;code&gt;writeR&lt;/code&gt; and &lt;code&gt;qsub&lt;/code&gt;, that simplify these two steps, respectively. I have made these available through the &lt;code&gt;miSciTools&lt;/code&gt; package, an R library that bundles miscellaneous software tools to expedite scientific analyses. We can install &lt;code&gt;miSciTools&lt;/code&gt; directly from GitHub using the &lt;code&gt;devtools&lt;/code&gt; package.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;devtools::&lt;span class=&quot;kw&quot;&gt;install_github&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;tpq/miSciTools&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(miSciTools)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, to show the logic behind &lt;em&gt;batch parallelization&lt;/em&gt;, we create a computationally expensive &lt;code&gt;for&lt;/code&gt;-loop that clusters 10 large mock datasets. In this example, parallelization is easy enough to implement using an R package like &lt;code&gt;foreach&lt;/code&gt;. However, for illustration purposes, we will instead parallelize this task through batch processing. Consider the single-threaded loop below.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(i in &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;){
  
  N &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;
  someData &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;matrix&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), N, N)
  hc &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;hclust&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;dist&lt;/span&gt;(someData))
  cuts &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;cutree&lt;/span&gt;(hc, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;write.csv&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(cuts),
            &lt;span class=&quot;dt&quot;&gt;file =&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;paste0&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cluster-&quot;&lt;/span&gt;, i, &lt;span class=&quot;st&quot;&gt;&quot;.csv&quot;&lt;/span&gt;))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During each pass through the loop, a large dataset is created, clustered, and labelled. In a more realistic scenario, each iteration might import and pre-process a different dataset. Since calculating the Euclidean distance of a dataset carries a high computational burden, we will almost certainly benefit here from parallelization.&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;r-writing-r&quot; class=&quot;section level3&quot; readability=&quot;46.867924528302&quot;&gt;&lt;h3&gt;R writing R&lt;/h3&gt;&lt;p&gt;In this example, we break up the task into 10 parallel parts by writing a single script that writes 10 separate scripts. Each script will generate a random matrix, cluster the data into 10 groups, and then save the cluster labels. We simplify this task by using &lt;code&gt;writeR&lt;/code&gt; which creates an R script from any number of “free text” representations of R code with intermingled variables from the &lt;em&gt;parent environment&lt;/em&gt; (i.e., the environment where the new script is written). To generate a preview of how the R script will appear when saved, we toggle the argument &lt;code&gt;preview = TRUE&lt;/code&gt;. The excerpt below will hopefully clarify the behavior of this function in a way that practical English cannot. Keep in mind that extraneous space does not impact R code in any way.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;outsideCode =&lt;span class=&quot;st&quot;&gt; &quot;something else from outside&quot;&lt;/span&gt;
file &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;writeR&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;          this = &quot;the first line of code&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;          and = &quot;then, there is a second line of code&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;          that = paste(&quot;you can also add&quot;, &quot;'&lt;/span&gt;, outsideCode, &lt;span class=&quot;st&quot;&gt;'&quot;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;                       &quot;as long as you remember punctuation&quot;)'&lt;/span&gt;
  , &lt;span class=&quot;dt&quot;&gt;preview =&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see in this preview an additional line of code that we did not provide explicitly. The &lt;code&gt;load()&lt;/code&gt; command is added to each new script so that it automatically loads the &lt;em&gt;parent environment&lt;/em&gt;. This ensures that any variables (or functions or packages) not explicitly passed to the new script will remain available to procedures within the &lt;code&gt;for&lt;/code&gt;-loop. Note that the new script saves the &lt;em&gt;parent environment&lt;/em&gt; at the time in which the script is written, which you can exploit in order to create a unique &lt;em&gt;child environment&lt;/em&gt; for each script.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;writeR&lt;/code&gt; function also accepts the optional argument, &lt;code&gt;file&lt;/code&gt;, which allows the user to change the location and name of the temporary R script. By default, all new R scripts (along with the .RData file from the &lt;em&gt;parent environment&lt;/em&gt;) are saved in a temporary directory. Note that this directory, along with its contents, gets deleted upon termination of the parent R session.&lt;/p&gt;&lt;p&gt;Finally, keep in mind that &lt;code&gt;writeR&lt;/code&gt; generates a new file using &lt;a href=&quot;https://en.wikipedia.org/wiki/Escape_character&quot;&gt;escaped&lt;/a&gt; text (e.g., try running &lt;code&gt;cat(&quot;\&quot;Quotes\&quot; and Tabs?\n\tYes.&quot;)&lt;/code&gt; in the R console). Since you need to wrap the “free text” R code within a set of quotes, you may need to use escaped quotations if you use more than one quotation style within your code (i.e., double quotes &lt;em&gt;and&lt;/em&gt; single quotes). To avoid having to escape quotations, stick to one style when writing R code for batch processing. Otherwise, new lines and blank space included in the “free text” R code will get written to the new file automatically.&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;r-bashing-r&quot; class=&quot;section level3&quot; readability=&quot;32&quot;&gt;&lt;h3&gt;R bashing R&lt;/h3&gt;&lt;p&gt;To use &lt;code&gt;qsub&lt;/code&gt;, we can provide either a “free text” bash command or the file location of an R script. The function will then deliver this command (or script) to the batch processing &lt;em&gt;queue&lt;/em&gt;. In the latter case, this function pipes an &lt;code&gt;R CMD BATCH&lt;/code&gt; bash command to the &lt;code&gt;qsub&lt;/code&gt; bash command.&lt;/p&gt;&lt;p&gt;To test that &lt;code&gt;qsub&lt;/code&gt; works properly on your machine, try the following function call. If successful, a new process should appear in the queue. You view the queue from the OS console using the &lt;code&gt;qstat&lt;/code&gt; bash command.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;qsub&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;sleep 30&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can use &lt;code&gt;qsub&lt;/code&gt; to put &lt;code&gt;writeR&lt;/code&gt; to work. Note that we supply &lt;code&gt;i&lt;/code&gt; from outside of the &lt;code&gt;writeR&lt;/code&gt; environment. However, because each new &lt;code&gt;writeR&lt;/code&gt; script imports the working directory of the parent script, we could just as well have named the output files using &lt;code&gt;file = paste0(&quot;cluster-&quot;, i, &quot;.csv&quot;)&lt;/code&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(i in &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;){
  
  cmd &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;writeR&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  N &amp;lt;- 2000&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  someData &amp;lt;- matrix(rnorm(N^2), N, N)&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  hc &amp;lt;- hclust(dist(someData))&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  cuts &amp;lt;- cutree(hc, 10)&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  write.csv(data.frame(cuts),&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;            file = paste0(&quot;cluster-&quot;, '&lt;/span&gt;, i, &lt;span class=&quot;st&quot;&gt;', &quot;.csv&quot;))&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  '&lt;/span&gt;)
  
  &lt;span class=&quot;kw&quot;&gt;qsub&lt;/span&gt;(cmd)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;a-place-in-the-queue&quot; class=&quot;section level3&quot; readability=&quot;24.5&quot;&gt;&lt;h3&gt;A place in the queue&lt;/h3&gt;&lt;p&gt;When this &lt;code&gt;for&lt;/code&gt;-loop completes, 10 single-process R scripts will have joined the queue. From the console, you can check the &lt;em&gt;TORQUE&lt;/em&gt; queue using the &lt;code&gt;qstat&lt;/code&gt; bash command. In addition, you can use the &lt;code&gt;qdel&lt;/code&gt; bash command to remove a queued job and the &lt;code&gt;qrun&lt;/code&gt; bash command to force the execution of a queued job.&lt;/p&gt;&lt;p&gt;In this example, each script saves the cluster labels as a comma-delimited file in the working directory. By default, the working directory of batch processed R scripts is the home directory of the computer. To combine the results from the parallelized processes, we could write a simple loop that reads in the &lt;code&gt;.csv&lt;/code&gt; file and joins the contents.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;files &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;vector&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;list&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
for(i in &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;){
  
  files[[i]] &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;read.csv&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;paste0&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cluster-&quot;&lt;/span&gt;, i, &lt;span class=&quot;st&quot;&gt;&quot;.csv&quot;&lt;/span&gt;))
}

&lt;span class=&quot;kw&quot;&gt;do.call&lt;/span&gt;(rbind, files)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;scaling-to-an-hpc&quot; class=&quot;section level3&quot; readability=&quot;24&quot;&gt;&lt;h3&gt;Scaling to an HPC&lt;/h3&gt;&lt;p&gt;When using a job manager on a high-performance computer (HPC), system administrators often request that users provide additional parameters that help guide optimal resource utilization. This includes, for example, the anticipated run time or expected RAM overhead. The &lt;code&gt;qsub&lt;/code&gt; function for R will pass along any number of specified &lt;em&gt;TORQUE&lt;/em&gt; parameters to the OS console: simply provide them as additional arguments. For example, to replicate the &lt;em&gt;TORQUE&lt;/em&gt; command &lt;code&gt;qsub -M thom@tpq.me [someBashCmd]&lt;/code&gt;, call instead the R function &lt;code&gt;qsub(someBashCmd, M = &quot;thom@tpq.me&quot;)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Depending on how you access the HPC, you may not have an R IDE like RStudio. Instead, you may need to use the OS console to run the master script-that-writes-scripts. To do this, simply call &lt;code&gt;R CMD BATCH script-that-writes-scripts.R&lt;/code&gt; from the OS console. This will execute the R script and pass the individual processes to the job manager.</description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.tpq.me/r-parallelization-through-batch-processing.html</dc:identifier>
</item>
<item>
<title>Reeling in Fisher&amp;#039;s Z Transformation</title>
<link>http://www.tpq.me/reeling-in-fishers-z-transformation.html</link>
<guid isPermaLink="true" >http://www.tpq.me/reeling-in-fishers-z-transformation.html</guid>
<description>&lt;!-- tabsets --&gt;&lt;!-- code folding --&gt;&lt;!--/.navbar --&gt;&lt;div id=&quot;a-fisher-to-fry&quot; class=&quot;section level3&quot; readability=&quot;30.465517241379&quot;&gt;&lt;h3&gt;A Fisher to fry&lt;/h3&gt;&lt;p&gt;I write now as a premise to another project rooted in the construction of an empiric distribution for a novel measure of dependence. For my own sake, I set out here to evaluate Fisher’s hypothesis that the &lt;em&gt;inverse hyperbolic tangent&lt;/em&gt; of a sample correlation coefficient, &lt;span class=&quot;math inline&quot;&gt;\(r\)&lt;/span&gt;, follows a normal distribution with a population mean equal to the similarly transformed population correlation coefficient, and a sampling error equal to &lt;span class=&quot;math inline&quot;&gt;\(\frac{1}{\sqrt{N-3}}\)&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;This transformation, known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fisher_transformation&quot;&gt;Fisher z-transformation&lt;/a&gt;, makes it possible to use correlation coefficients within a conventional hypothesis testing framework by providing a way to calculate standard error using only a point estimate (i.e., the sample correlation coefficient) and the sample size. In this way, it offers an elegant means by which to effortlessly apply well-described statistical methods to correlation-based studies.&lt;/p&gt;&lt;p&gt;In this report, I demonstrate empirically that (1) the z-transformation of a distribution of sample correlation coefficients has a normal distribution, and (2) the standard error about that distribution approximately equals &lt;span class=&quot;math inline&quot;&gt;\(\frac{1}{\sqrt{N-3}}\)&lt;/span&gt;. Although not discussed further, do take note that Fisher’s hypothesis presupposes that the two correlated variables are independent and follow a bivariate normal distribution.&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;it-begins-with-the-first-step&quot; class=&quot;section level3&quot; readability=&quot;39&quot;&gt;&lt;h3&gt;It begins with the first step&lt;/h3&gt;&lt;p&gt;We begin by calculating the correlation between two randomly distributed &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;-sized vectors, &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;N &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
X &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N)
Y &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N)
&lt;span class=&quot;kw&quot;&gt;cor&lt;/span&gt;(X, Y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 0.0106989&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yet, a single correlation coefficient is not sufficient to put Fisher’s z-transformation to the test. Instead, we must establish a distribution of correlation coefficients. For this, we replicate the above code chunk an arbitrarily large number of times to build a sample set of correlation coefficients between 5000 pairs of &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;-sized vectors.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;N &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
res &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5000&lt;/span&gt;), function(N) &lt;span class=&quot;kw&quot;&gt;cor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N), &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To apply Fisher’s z-transformation, we simply calculate &lt;span class=&quot;math inline&quot;&gt;\(atanh(r)\)&lt;/span&gt; for this sample set of correlation coefficients, yielding a normal distribution of sample statistics. The Shapiro-Wilk normality test confirms that these z-transformed data follow a normal distribution.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;density&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;atanh&lt;/span&gt;(res)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;http://www.tpq.me/reeling-in-fishers-z-transformation_files/figure-html/unnamed-chunk-3-1.png&quot; width=&quot;672&quot;/&gt;&lt;/p&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;shapiro.test&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;atanh&lt;/span&gt;(res))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  atanh(res)
## W = 0.99969, p-value = 0.6889&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, since the &lt;em&gt;standard error&lt;/em&gt; of a statistic is defined as the &lt;em&gt;standard deviation of the sampling distribution&lt;/em&gt; of that statistic, we would expect that the standard deviation of these z-transformed data approximately equals &lt;span class=&quot;math inline&quot;&gt;\(\frac{1}{\sqrt{N-3}}\)&lt;/span&gt;. In other words, the empiric standard error should approximate the predicted standard error.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;sd&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;atanh&lt;/span&gt;(res))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 0.03163743&lt;/code&gt;&lt;/pre&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;/(&lt;span class=&quot;kw&quot;&gt;sqrt&lt;/span&gt;(N&lt;span class=&quot;dv&quot;&gt;-3&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 0.03167032&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div id=&quot;one-size-to-fit-them-all&quot; class=&quot;section level3&quot; readability=&quot;27&quot;&gt;&lt;h3&gt;One size to fit them all&lt;/h3&gt;&lt;p&gt;Everything checks out so far, but does Fisher’s z-transformation rule hold true for all &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;-sized vectors? To test this, we embed the code that calculates correlation between 5000 pairs of &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;-sized vectors within a loop that iterates across several values of &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;N.all &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;from =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;to =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
distrs &amp;lt;-
&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;lapply&lt;/span&gt;(N.all,
         function(N){
           
           &lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5000&lt;/span&gt;), function(N) &lt;span class=&quot;kw&quot;&gt;cor&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N), &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N)))
         })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this result, we can calculate both the empiric standard error and the predicted standard error for all &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sd.empiric &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(distrs, function(d) &lt;span class=&quot;kw&quot;&gt;sd&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;atanh&lt;/span&gt;(d)))
sd.predict &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(N.all, function(N) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;/(&lt;span class=&quot;kw&quot;&gt;sqrt&lt;/span&gt;(N&lt;span class=&quot;dv&quot;&gt;-3&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we compare these quantitatively by calculating the mean of the percent difference between them.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;abs&lt;/span&gt;(sd.empiric -&lt;span class=&quot;st&quot;/&gt;sd.predict)/sd.predict*&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 0.9554196&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div id=&quot;positively-certain&quot; class=&quot;section level3&quot; readability=&quot;49.5&quot;&gt;&lt;h3&gt;Positively certain&lt;/h3&gt;&lt;p&gt;Now, all that is left to do is convince myself that the approximate equality between the empiric standard error and the predicted standard error is not just an artifact of the distribution of the random variables &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;. To do this, we apply the pipeline established above to two positively correlated random variables. First, however, we need to define a function that creates the two positively correlated random variables, &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;, containing &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt; elements each, and then calculates the correlation between them.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;newCor &amp;lt;-&lt;span class=&quot;st&quot;/&gt;function(N){
  
  v &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, &lt;span class=&quot;dt&quot;&gt;mean =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
  X &amp;lt;-&lt;span class=&quot;st&quot;/&gt;v +&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, &lt;span class=&quot;dt&quot;&gt;sd =&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.25&lt;/span&gt;)
  Y &amp;lt;-&lt;span class=&quot;st&quot;/&gt;v +&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, &lt;span class=&quot;dt&quot;&gt;sd =&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.25&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;cor&lt;/span&gt;(X, Y)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this formula, we now have a tidy way of generating a distribution of positive correlation coefficients.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;N &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
res &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5000&lt;/span&gt;), newCor)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, the Shapiro-Wilk normality test confirms that the z-transformed data follow a normal distribution.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;density&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;atanh&lt;/span&gt;(res)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;http://www.tpq.me/reeling-in-fishers-z-transformation_files/figure-html/unnamed-chunk-10-1.png&quot; width=&quot;672&quot;/&gt;&lt;/p&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;shapiro.test&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;atanh&lt;/span&gt;(res))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  atanh(res)
## W = 0.99961, p-value = 0.4322&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we generate a distribution of positive correlations between two &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;-sized random variables across a range of &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;N.all &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
distrs &amp;lt;-
&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;lapply&lt;/span&gt;(N.all,
         function(N){
           
           &lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5000&lt;/span&gt;), newCor)
         })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As above, we compare the empiric standard error with the predicted standard error…&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;sd.empiric &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(distrs, function(d) &lt;span class=&quot;kw&quot;&gt;sd&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;atanh&lt;/span&gt;(d)))
sd.predict &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(N.all, function(N) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;/(&lt;span class=&quot;kw&quot;&gt;sqrt&lt;/span&gt;(N&lt;span class=&quot;dv&quot;&gt;-3&lt;/span&gt;)))
&lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;abs&lt;/span&gt;(sd.empiric -&lt;span class=&quot;st&quot;/&gt;sd.predict)/sd.predict*&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 0.8095219&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;…and breathe a sigh of relief.</description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.tpq.me/reeling-in-fishers-z-transformation.html</dc:identifier>
</item>
<item>
<title>Genetic Monkeys on Typewriters</title>
<link>http://www.tpq.me/genetic-monkeys-on-typewriters.html</link>
<guid isPermaLink="true" >http://www.tpq.me/genetic-monkeys-on-typewriters.html</guid>
<description>&lt;!-- tabsets --&gt;&lt;!-- code folding --&gt;&lt;!--/.navbar --&gt;&lt;div id=&quot;random-rules&quot; class=&quot;section level3&quot; readability=&quot;19.53995157385&quot;&gt;&lt;h3&gt;Random rules&lt;/h3&gt;&lt;p&gt;If a finite number of monkeys can write &lt;a href=&quot;https://en.wikipedia.org/wiki/Infinite_monkey_theorem&quot;&gt;Shakespeare&lt;/a&gt; in infinite time, then an infinite number of monkeys can probably write Shakespeare in finite time. But can a finite number of monkeys write Shakespeare in finite time?&lt;/p&gt;&lt;p&gt;Tentatively, yes. See, randomness solves problems. How? You guessed it: with enough guesses, you can guess anything right. Trying every possible solution is a well known approach to finding the correct solution (take &lt;a href=&quot;https://en.wikipedia.org/wiki/Bogosort&quot;&gt;bogosort&lt;/a&gt; for example). But guessing takes time and since we never seem to have enough of that, we usually want the right answer right away. The problem is that solving a problem is hard when you do not know much about the problem you are trying to solve. So what happens when you do not know how to implement the optimal solution, but to try &lt;em&gt;every&lt;/em&gt; solution would take too long?&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;the-fittest-algorithm&quot; class=&quot;section level3&quot; readability=&quot;50&quot;&gt;&lt;h3&gt;The fittest algorithm&lt;/h3&gt;&lt;p&gt;Nature has discovered its own powerful optimization algorithm that successfully balances trial-and-error with speed: &lt;em&gt;the process of evolution by natural selection&lt;/em&gt;. If you can conceive of genes as an attempted “solution” to the “problem” of survival until reproduction, then every organism is a guess as to the answer for life.&lt;/p&gt;&lt;p&gt;From this perspective, genomes that lead to &lt;em&gt;reproduction&lt;/em&gt; represent solutions that work well. Likewise, genomes that lead to &lt;em&gt;reproductive offspring&lt;/em&gt; represent solutions that work even better. Meanwhile, the best solutions would lead to &lt;em&gt;perpetual reproduction&lt;/em&gt;. It would seem then that the &lt;em&gt;Archae&lt;/em&gt;, microscopic organisms with genomes that have remained nearly constant for billions of years, represent a nearly perfect solution to life up until now.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Genetic algorithms&lt;/strong&gt; borrow from nature to provide a framework for solving problems through evolutionary discovery. In simple terms, these algorithms offer a construct for iteratively testing the quality of randomly generated solutions, whereby each subsequent generation of solutions derive partially from the best performing solutions of the previous generation. It achieves this by simultaneously exploiting two core principals of natural evolution: (1) mutation and (2) sexual reproduction.&lt;/p&gt;&lt;p&gt;When an organism reproduces, the offspring incurs random mutations to their inherited genome. Then, through the process of evolution by natural selection, the fittest of these mutations get passed along to the next generation, allowing the most successful prior “solutions” to seed the next solution set. Some organisms have an additional layer of randomization: &lt;em&gt;recombination&lt;/em&gt;. During this stage of reproduction (colloquially known as sex), the genomes of two parent organisms &lt;em&gt;recombine&lt;/em&gt; with one another through a process called &lt;em&gt;crossing over&lt;/em&gt;. Specifically, the genes of one (presumably successful) parent intermingles with the genes of another (presumably successful) parent, allowing an opportunity for the best (or the worst) traits from each parent to join together.&lt;/p&gt;&lt;p&gt;(Note that on an individual basis, &lt;em&gt;crossing-over&lt;/em&gt; does not guarantee more successful offspring. However, it appears to have some kind of longitudinal benefit as evidenced by the sheer number of complex organisms that engage in sexual reproduction. In fact, some hermaphroditic organisms, notably flowering plants, will even cross-over with themselves in what is called &lt;em&gt;autogamy&lt;/em&gt;.)&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;digital-genes&quot; class=&quot;section level3&quot; readability=&quot;42.088178294574&quot;&gt;&lt;h3&gt;Digital genes&lt;/h3&gt;&lt;p&gt;Of course, genetic algorithms cannot capture the total complexity of biological systems. As such, &lt;em&gt;digital genes&lt;/em&gt; differ somewhat from their biological counterpart. First, unlike biological genes, which store information as &lt;code&gt;A&lt;/code&gt;s, &lt;code&gt;G&lt;/code&gt;s, &lt;code&gt;T&lt;/code&gt;s, and &lt;code&gt;C&lt;/code&gt;s, digital genes store bits of information as &lt;code&gt;1&lt;/code&gt;s and &lt;code&gt;0&lt;/code&gt;s. Second, unlike biological genes which can grow and shrink from insertions and deletions, digital genes have a fixed size. Third, unlike biological genes which have layers upon layers of higher-order regulation, digital genes have only the simplest expression profiles.&lt;/p&gt;&lt;p&gt;On the other hand, like biological genes, digital genes require a key that translates the gene transcripts (comprised of evenly spaced “codons”) into a functional sequence (comprised of protein-like “building blocks”). This key, analogous to the &lt;a href=&quot;https://en.wikipedia.org/wiki/DNA_codon_table&quot;&gt;DNA codon table&lt;/a&gt;, is a user-defined function that ultimately tells the genetic algorithm how to make sense of (pseudo-)random binary strings.&lt;/p&gt;&lt;p&gt;To demonstrate a basic “codon table”, I introduce a function below that translates a &lt;em&gt;binary sequence&lt;/em&gt; (analogous to a genetic codon) into a &lt;em&gt;decimal sequence&lt;/em&gt; (analogous to an amino acid). Amino acids, the “building blocks” of the cell, conventionally represent the functional level upon which natural selection works. Then, just as amino acids undergo the test of life to determine the fitness of that organism, these translated decimal sequences will undergo their own test to determine their “fitness” as a solution.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;table &amp;lt;-&lt;span class=&quot;st&quot;/&gt;function(codon){
  
  &lt;span class=&quot;kw&quot;&gt;strtoi&lt;/span&gt;(codon, &lt;span class=&quot;dt&quot;&gt;base =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;digital-ribosomes&quot; class=&quot;section level3&quot; readability=&quot;42.5&quot;&gt;&lt;h3&gt;Digital ribosomes&lt;/h3&gt;&lt;p&gt;In nature, each codon consists of three bases which exist in one of four states. Since we can represent four states using two bits, each natural codon contains &lt;span class=&quot;math inline&quot;&gt;\(3(2)\)&lt;/span&gt; bits of information. We will follow this convention for now by using 6-bit &lt;em&gt;digital codons&lt;/em&gt;, allowing for &lt;span class=&quot;math inline&quot;&gt;\(2^6\)&lt;/span&gt; values per codon. An example of a digital gene with two 6-bit codons might look like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;twoCodons &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above, I introduced a function that translates a single &lt;em&gt;digital codon&lt;/em&gt; into a decimal sequence. However, in order to perform real work, we need to harness the power of multiple codons by translating an entire &lt;em&gt;digital genome&lt;/em&gt;. Within the cell, the &lt;strong&gt;ribosome&lt;/strong&gt; organelle holds the machinery that translates genes into functional proteins. To reinforce analogy, we will embed our custom “codon table” within a &lt;em&gt;digital ribosome&lt;/em&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ribosome &amp;lt;-&lt;span class=&quot;st&quot;/&gt;function(string, &lt;span class=&quot;dt&quot;&gt;nbits =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;how =&lt;/span&gt; table){
  
  if(!&lt;span class=&quot;kw&quot;&gt;is.character&lt;/span&gt;(string)){
    
    string &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;paste0&lt;/span&gt;(string, &lt;span class=&quot;dt&quot;&gt;collapse =&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;)
  }
  
  if(&lt;span class=&quot;kw&quot;&gt;nchar&lt;/span&gt;(string) %%&lt;span class=&quot;st&quot;/&gt;nbits !=&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;){
    
    &lt;span class=&quot;kw&quot;&gt;stop&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Digital gene not evenly divisible by chosen codon size.&quot;&lt;/span&gt;)
  }
  
  output &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;vector&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;list&quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;nchar&lt;/span&gt;(string)/nbits)
  for(i in &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:(&lt;span class=&quot;kw&quot;&gt;nchar&lt;/span&gt;(string)/nbits -&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)){
    
    codon &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;substr&lt;/span&gt;(string, i*nbits +&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, i*nbits +&lt;span class=&quot;st&quot;/&gt;nbits)
    output[[i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;]] &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;do.call&lt;/span&gt;(how, &lt;span class=&quot;kw&quot;&gt;list&lt;/span&gt;(codon))
  }
  
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;(output)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, by feeding the mock &lt;em&gt;digital gene&lt;/em&gt; through this &lt;em&gt;digital ribosome,&lt;/em&gt; we can convert a series of evenly spaced binary strings into their corresponding decimal values.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ribosome&lt;/span&gt;(twoCodons)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 41
## 
## [[2]]
## [1] 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div id=&quot;digital-fitness&quot; class=&quot;section level3&quot; readability=&quot;58&quot;&gt;&lt;h3&gt;Digital fitness&lt;/h3&gt;&lt;p&gt;Now, we need to put the translated gene to the test. For this, we define a &lt;em&gt;fitness function&lt;/em&gt; that will score the “fitness” of a digital genome. In this paradigm, I find it helpful to think of “fitness” as a measure of the proximity of an outcome to an intended result. By convention, the fitness function will convert a binary vector input into a &lt;em&gt;survival score&lt;/em&gt;, such that higher scores signify greater fitness. Then, through simulated evolution, the more fit solutions (i.e., those with higher scores) will have an increased probability of seeding the next generation of solutions.&lt;/p&gt;&lt;p&gt;In the example below, we define a fitness function that solves the simple equation &lt;span class=&quot;math inline&quot;&gt;\(a^2+b=308\)&lt;/span&gt;. Since the fitness function expects binary vector input, we embed our &lt;em&gt;digital ribosome&lt;/em&gt; within the fitness function itself. Then, based on our choice of genome size and ribosome configuration, the genetic algorithm will attempt solutions for &lt;span class=&quot;math inline&quot;&gt;\(0&lt;a span=&quot;&quot;&gt; and &lt;span class=&quot;math inline&quot;&gt;\(0&lt;b span=&quot;&quot;&gt;.&lt;/b&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;(Note that if we wanted to change the range of values for &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; or &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;, we just need to change the “codon table” function. If we wanted to add more possible values for &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; or &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;, we just need to increase the size of the codon. If we wanted to add more variables, we just need to increase the size of the genome. In this way, we have a tremendous amount of control over the kinds of solutions tested. Meanwhile, through careful crafting of the fitness function, we maintain total control over how the solutions get tested.)&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fitness &amp;lt;-&lt;span class=&quot;st&quot;/&gt;function(binary){
  
  AA &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;ribosome&lt;/span&gt;(binary, &lt;span class=&quot;dt&quot;&gt;nbits =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;how =&lt;/span&gt; table)
  solution &amp;lt;-&lt;span class=&quot;st&quot;/&gt;AA[[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]]^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; +&lt;span class=&quot;st&quot;/&gt;AA[[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]]
  &lt;span class=&quot;kw&quot;&gt;atan&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; /&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;308&lt;/span&gt; -&lt;span class=&quot;st&quot;/&gt;solution))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to execute the algorithm, we need to provide two additional parameters. The first, &lt;code&gt;nBits&lt;/code&gt;, equals the total length of the &lt;em&gt;digital genome&lt;/em&gt; expected by the &lt;em&gt;digital ribosome&lt;/em&gt; and &lt;em&gt;fitness function&lt;/em&gt;. The second, &lt;code&gt;maxiter&lt;/code&gt;, equals the total number of generations (i.e., reproductive cycles) until the algorithm terminates. Running an algorithm with fewer iterations will finish sooner, but will carry an increased risk of not converging onto a “best” solution.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(GA)
&lt;span class=&quot;kw&quot;&gt;set.seed&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
res &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;ga&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;binary&quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;fitness =&lt;/span&gt; fitness, &lt;span class=&quot;dt&quot;&gt;nBits =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;maxiter =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;http://www.tpq.me/genetic-monkeys-on-typewriters_files/figure-html/unnamed-chunk-7-1.png&quot; width=&quot;672&quot;/&gt;&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;solution &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(res)$solution
&lt;span class=&quot;kw&quot;&gt;ribosome&lt;/span&gt;(solution)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 17
## 
## [[2]]
## [1] 19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div id=&quot;more-than-one-answer&quot; class=&quot;section level3&quot; readability=&quot;18&quot;&gt;&lt;h3&gt;More than one answer&lt;/h3&gt;&lt;p&gt;This mock example highlights how the same genetic algorithm, when executed twice, may arrive at different solutions each time. By starting with a different genetic stock (i.e., a different primordial Eve), or by drifting through a different genetic path, a genetic algorithm may converge on a different “best” solution.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;set.seed&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
res &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;ga&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;binary&quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;fitness =&lt;/span&gt; fitness, &lt;span class=&quot;dt&quot;&gt;nBits =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;maxiter =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;ribosome&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(res)$solution)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;literary-genes&quot; class=&quot;section level3&quot; readability=&quot;77&quot;&gt;&lt;h3&gt;Literary genes&lt;/h3&gt;&lt;p&gt;Since we can represent nearly any type of input as a binary string, genetic algorithms offer a tremendous amount of flexibility when solving problems. Next, we will use genetic algorithms to draft a line from Shakespeare. By constructing a fitness function that rewards digital genes that most closely approximate Shakespearean verse, we guide an otherwise chaotic process toward coherency. Then, just like the proverbial monkey striking away on a typewriter, we author something poetically sensible out of nothing more than fragments of nonsense.&lt;/p&gt;&lt;p&gt;First, however, we need a new “codon table” that translates binary strings to alphanumeric characters. To do this, we will convert &lt;em&gt;binary&lt;/em&gt; to &lt;em&gt;decimal&lt;/em&gt;, then &lt;em&gt;decimal&lt;/em&gt; to &lt;em&gt;raw&lt;/em&gt;, and finally &lt;em&gt;raw&lt;/em&gt; to &lt;em&gt;character&lt;/em&gt;.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;table &amp;lt;-&lt;span class=&quot;st&quot;/&gt;function(codon){
  
  dec &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;strtoi&lt;/span&gt;(codon, &lt;span class=&quot;dt&quot;&gt;base =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;rawToChar&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;as.raw&lt;/span&gt;(dec))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By using this new “codon table” in conjunction with the digital ribosome from above, we can convert a digital genome into a literary paragraph. However, in order to ensure that each codon could eventually become any letter, we need these codons to contain 7-bits of information each.&lt;/p&gt;&lt;p&gt;Next, we need a way to evaluate the fitness, or literary quality, of the translated binary strings. In theory, an experienced user could incorporate some kind of natural language processing to guide the algorithm toward novel speech. However, in this contrived example, we will simply excerpt a quote from Shakespeare against which we compare each piece of translated text. As such, our fitness function will measure the similarity between Shakespeare and random nonsense. Then, by iteratively breeding the most sensible nonsense, we can eventually arrive at some prosaic truth.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;prose &amp;lt;-&lt;span class=&quot;st&quot;&gt; &quot;that which we call a rose by any other name would smell as sweet&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fitness &amp;lt;-&lt;span class=&quot;st&quot;/&gt;function(binary){
  
  AA &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;ribosome&lt;/span&gt;(binary, &lt;span class=&quot;dt&quot;&gt;nbits =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;how =&lt;/span&gt; table)
  &lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;unlist&lt;/span&gt;(AA) ==&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;unlist&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;strsplit&lt;/span&gt;(prose, &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;)))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to execute the algorithm, we again need to supply arguments for the &lt;code&gt;nBits&lt;/code&gt; and &lt;code&gt;maxiter&lt;/code&gt; parameters. Since we need 7-bits to represent each letter in the final result, we set &lt;code&gt;nBits&lt;/code&gt; equal to &lt;code&gt;nchar(prose)*7&lt;/code&gt;. Next, we set &lt;code&gt;maxiter&lt;/code&gt; to 100,000 generations, a value which led to promising results during prior testing.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;set.seed&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
res &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;ga&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;binary&quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;fitness =&lt;/span&gt; fitness, &lt;span class=&quot;dt&quot;&gt;nBits =&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;nchar&lt;/span&gt;(prose)*&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;maxiter =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100000&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sometimes, the genetic algorithms result object contains &lt;em&gt;multiple&lt;/em&gt; equally fit solutions. In these cases, I usually collapse all “best” solutions into an “average best” solution.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;allsol &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(res)$solution
if(&lt;span class=&quot;kw&quot;&gt;nrow&lt;/span&gt;(allsol) &amp;gt;&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;){
  
  final &amp;lt;-&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;colSums&lt;/span&gt;(allsol) /&lt;span class=&quot;st&quot;/&gt;&lt;span class=&quot;kw&quot;&gt;nrow&lt;/span&gt;(allsol))
}else{
  
  final &amp;lt;-&lt;span class=&quot;st&quot;/&gt;allsol[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can join the “best” characters together to draft the final sentence.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;ribosome&lt;/span&gt;(final, &lt;span class=&quot;dt&quot;&gt;nbits =&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;collapse =&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &quot;that which we call a rose by any other name would smell as sweet&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div id=&quot;afterward&quot; class=&quot;section level3&quot; readability=&quot;26.962290502793&quot;&gt;&lt;h3&gt;Afterward&lt;/h3&gt;&lt;p&gt;Finally, I should remind the reader that the monkey-on-typewriter proverb does not accurately portray the simian creative process. Monkeys do not operate as random text generators, but rather have their own hopes, dreams, goals, desires, and even their own aesthetic. In fact, researchers have put monkeys to the test, providing them with typewriters, food, and time (the raw materials of fiction), and then waited for &lt;em&gt;Hamlet&lt;/em&gt; to happen. However, as noted by a prestigious journalist, “after a month, the Sulawesi crested macaques had only succeeded in partially destroying the machine, using it as a lavatory, and mostly typing the letter &lt;a href=&quot;http://news.bbc.co.uk/2/hi/3013959.stm&quot;&gt;s&lt;/a&gt;,” which is about all I can muster together myself most months.</description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.tpq.me/genetic-monkeys-on-typewriters.html</dc:identifier>
</item>
</channel>
</rss>
